nama file    : jawabanSoal.txt
deskripsi    : berisi jawaban dari pertanyaan yang ada di modul pertemuan ke-6
pembuat      : shopia mudjahidah
nim          : 24060123120010
tanggal      : 27 April 2025

Polimorfisme
    b. Polimorfisme Ad Hoc: Coercion
        1. int output = 'a';
           System.out.println(output); --> 97
           Berhasil dieksekusi: ya, coercion dari char ke int otomatis karena 'a' = 97
        2. double x = 15.5;
           int output = x;
           System.out.println(output); 
           Berhasil dieksekusi: tidak, gagal dieksekusi karena butuh casting eksplisit dari double ke int
        3. int y = 25;
           double output = y;
           System.out.println(output); --> 25.0
           Berhasil dieksekusi: ya, coercion dari int ke double
        4. int z = 78;
           char output = (char) z;
           System.out.println(output); --> 'N'
           Berhasil dieksekusi: ya, casting eksplisit dari int ke char yang sesuai nilai Unicode-nya yaitu 78 = 'N'
        5. char a = ‘a’;
           double output = a;
           System.out.println(output); --> 97.0
           Berhasil dieksekusi: ya, coercion berantai: char -> int -> double, char diubah ke int terlebih dahulu yaitu 'a' = 97, lalu di-coerce ke double

    c. Polimorfisme Universal: Inclusion
       Anggap jika kita mempunyai method hitungSewa(Vehicle v), analisalah keuntungan penggunaan teknik polimorfisme inclusion.
       keuntungan dari polimorfisme inclusion adalah objek dari subclass seperti Car dan Bus diperlakukan sebagai objek dari superclass Vehicle. 
       dengan teknik ini, kita bisa membuat satu method umum, misalnya hitungSewa(Vehicle v), yang dapat digunakan untuk semua jenis kendaraan 
       tanpa perlu membuat method terpisah untuk masing-masing subclass. Keuntungan utamanya adalah membuat kode lebih ringkas, fleksibel, dan 
       mudah dikembangkan. Jika suatu saat ada jenis kendaraan baru, kita tetap bisa menggunakan method yang sama tanpa harus mengubah struktur 
       program.

    d. Jika dieksekusi main method sebagai berikut:
            Person p;
            p = new Student("Sally");
            p.status(1);
       maka output yang didapat adalah:
            Now offline: Sally
       penjelasan:
       method isAsleep() di-override oleh class Student dan java menjalankan method override tersebut saat runtime meskipun variabel bertipe Person. 
       karena isAsleep(1) di class Student bernilai false, maka status jadi "offline", nama "Sally" muncul dari method toString() milik class Person.

    e. Post Test
        pertanyaan:
        2. Jelaskan manfaat polimorfisme pada kasus ini. 
        3. Apabila pada main program perlu menambahkan pegawai4 dan pegawai5, apa permasalahan yang muncul jika diterapkan tanpa polimorfisme (inclusion)?

        jawaban:
        2. manfaat dari polimorrfisme pada kasus ini adalah kita bisa menyimpan semua objek pegawai dalam satu daftar tanpa harus pisahkan berdasarkan 
           jenisnya. saat kita memanggil method tampilData() yang dijalankan tetap method milik class aslinya (bukan milik Pegawai), jadi datanya tetap 
           sesuai. kalau suatu hari ada jenis pegawai baru, kita tinggal tambahkan tanpa perlu ubah logika program utama.
        3. jika tdak menerapkan polimorfisme (inclusion), kita tidak bisa memasukkan semuanya ke dalam satu ArrayList<Pegawai> karena Pegawai tidak 
           mengenal atribut bonus atau tunjangan. kita harus membuat array atau list terpisah untuk tiap jenis pegawai, dan menggunakan instanceof 
           atau casting secara manual.
